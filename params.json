{"name":"Lldb.nvim","tagline":"A major refactor of https://github.com/gilligan/vim-lldb plugin using Neovim's advanced features to provide a smoother, cleaner interface.","body":"# LLDB Neovim Frontend\r\n\r\nThis plugin provides lldb debbuging integration including\r\n\r\n* breakpoints displayed as signs\r\n* backtrace view\r\n* locals view\r\n* threads view\r\n* disassembly and registers view\r\n* customizable layout\r\n* and more ...\r\n\r\nArbitrary lldb commands can be invoked as well.\r\n\r\n**NOTE** : This is a fork of https://github.com/gilligan/vim-lldb/, which is a fork of\r\nthe plugin that is part of the llvm distribution. The original can be found at\r\nhttp://llvm.org/svn/llvm-project/lldb/trunk/utils/vim-lldb/\r\n\r\n## Prerequisites\r\n\r\n* [Neovim](https://github.com/neovim/neovim) with [python support](https://github.com/neovim/python-client).\r\n* [LLDB](http://lldb.llvm.org/)\r\n\r\n## Installation\r\n\r\nInstallation is easiest using a plugin manager such as [vim-plug](https://github.com/junegunn/vim-plug):\r\n```\r\n    Plug \"critiqjo/lldb.nvim\"\r\n```\r\nOr you can manually copy the files to your .nvimrc folder if you prefer that for some reason.\r\n\r\nNote: After installing (or updating) a plugin that uses Neovim's remote plugin API, you will have to execute:\r\n```\r\n    :UpdateRemotePlugins\r\n```\r\nwhich will create a manifest file (`~/.nvim/.nvimrc-rplugin~`) containing some mappings;\r\nthen restart Neovim. This might already be taken care of by the plugin manager, but I'm not sure.\r\n\r\n## Getting started\r\n\r\nWatch a [demo video](https://youtu.be/aXSNhTH1Co4), or refer to the getting\r\nstarted section in the vim-docs (`:h lldb-start`).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}