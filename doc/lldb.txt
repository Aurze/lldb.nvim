*lldb.txt* A plugin that enables debugging from your favourite editor

                   ____    ____                 _
                  / / /___/ / /_    ____ _   __(_)___ ___
                 / / / __  / __ \  / __ \ | / / / __ `__ \
                / / / /_/ / /_/ / / / / / |/ / / / / / / /
               /_/_/\__,_/_.___(_)_/ /_/|___/_/_/ /_/ /_/

                  LLDB Debugger Ingegration For Neovim

==============================================================================

CONTENTS                                                *lldb-contents*

    1. Introduction .................... |lldb-intro|
    2. Features ........................ |lldb-features|
    3. Getting Started ................. |lldb-start|
    4. Commands ........................ |lldb-commands|
    5. Mappings ........................ |lldb-mappings|
    6. License ......................... |lldb-license|
    7. Issues and Bugs ................. |lldb-bugs|
    8. Contributing .................... |lldb-contributing|


Original Author:    Daniel Malea <daniel.malea@intel.com>
Forked by:          Tobias Pflug <tobias.pflug@gmail.com>
Maintainer:         John C F <john.ch.fr@gmail.com>
License:            Same terms as Vim itself (see |license|)

INTRODUCTION                                            *lldb-intro*

The plugin provides an interface to the lldb debugger allowing for
convenient debugging sessions inside your favorite editor including
features such as breakpoints, stepping, watchpoints etc.

The original plugin can be found here:

http://llvm.org/svn/llvm-project/lldb/trunk/utils/vim-lldb/

Credit for pretty much all current functionality goes to the original
authors. Currently, work has been done to migrate the existing features
to use Neovim's new API so that the user interface is much more responsive.
Also, the focus has been to simplify the code wherever possible, so that
it will be easier to debug and extend.

FEATURES                                                *lldb-features*

* Buffers showing backtrace, breakpoints, threads, locals, registers and
  disassembly.
* Tab-completion for LLDB commands
* Event-based UI updates
* Non-blocking UI
  Exception: May block while fetching the tab-completion list.
* Customizable Layout
  See |lldb-customizing|.

GETTING STARTED                                         *lldb-start*

To quickly get started, compile (with debugging symbols) the source and
open a source file belonging to the program in Neovim, and execute
>
    :LLsession new
<
This will prompt you to choose a location for your new "session" file, and
further prompts you to input path of the target executable.

The default session file defines 2 modes: "code", and "debug". You are now
in the "code" mode, which is an empty mode. Now switch to "debug" mode:
>
    :LLmode debug
<
Now, a new tab with windows showing various information about the state of
debugger will be created. And you will prompted whether you would like to
launch the process right away.

With cursor on some line in the source file, press |<Plug>LLBreakSwitch| to
set a breakpoint at that line. Alternatively, you can execute:
>
    :LL breakpoint set --name function_name
<
Notice that there is tab-completion. If you chose not to launch the process
earlier, you can do so by one of the following commands:
>
    :LL process launch
    :LL process launch -- args
    :LL process launch -i infile -o outfile -- args
<
Once the program reaches the specified breakpoint you will be able to
inspect state and step through the program ... bla bla bla.

Don't forget that, since the debugger is asynchronous, you can interrupt an
unresponsive process using:
>
    :LL process interrupt
<
Alternatively, you can kill it using:
>
    :LL process kill
<
CUSTOMIZING                                             *lldb-customizing*

 *g:lldb#session#file*
                      Default session file name: 'lldb-nvim.json'

 *g:lldb#session#mode_setup*
                      Default layout setup function: 'lldb#layout#setup'
                      This will be called every time a new mode is set up,
                      with mode name as the first argument.

 *g:lldb#session#mode_teardown*
                      Default layout teardown function: 'lldb#layout#teardown'
                      Similar to mode_setup above.

COMMANDS                                                *lldb-commands*

                                                        *:LL*
:LL {cmd}               Execute an arbitrary LLDB command {cmd} in the LLDB
                        command interpreter.

                                                        *:LLmode*
:LLmode {mode}          Switch to {mode}, by tearing down the current mode,
                        and executing the setup actions of {mode}

                                                        *:LLrefresh*
:LLrefresh              Updates all debugger signs and buffer contents.

                                                        *:LLsession*
:LLsession {cmd} ...    Execute a session related command.
                        See |lldb-session-commands| for more details.

MAPPINGS                                                *lldb-mappings*

<Plug>LLBreakSwitch                             *<Plug>LLBreakSwitch*
                        Insert breakpoint at cursor location.

I recommend setting the following maps:
>
    nmap <M-b> <Plug>LLBreakSwitch
    nnoremap <F4> :LLmode debug<CR>
    nnoremap <S-F4> :LLmode code<CR>
    nnoremap <F8> :LL continue<CR>
    nnoremap <S-F8> :LL process interrupt<CR>
    nnoremap <F9> :LL print <C-R>=expand('<cword>')<CR>
    vnoremap <F9> :<C-U>LL print <C-R>=lldb#util#get_selection()<CR>
<

LICENSE                                                 *lldb-license*

Same as Vim itself. See |license|.

ISSUES AND BUGS                                         *lldb-bugs*

When in doubt, please feel free to discuss at Gitter:
https://gitter.im/critiqjo/lldb.nvim

If you run into a bug, use the Github issue tracker to report it:
https://github.com/critiqjo/lldb.nvim/issues

It would be nice if you could set the following environment variable:
>
    export NVIM_PYTHON_LOG_FILE=/tmp/nvlog
<
and post the log along with the bug report.

CONTRIBUTING                                            *lldb-contributing*

That would be great! But until version 0.9 is released, I'll be making many
breaking changes to the plugin. You can monitor the progress in dev-branches.
Therefore please wait until the plugin workflow is stabilized.

 vim:tw=78:sw=4:ft=help:norl:
